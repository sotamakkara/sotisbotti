<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotSuite</name>
    </assembly>
    <members>
        <member name="T:BotSuite.ApplicationTunnel">
            <summary>
            control extern application by reading values, writing values in memory blocks
            can be used to create trainers by continuous writing a value at some memory address
            </summary>
        </member>
        <member name="F:BotSuite.ApplicationTunnel.ProcessId">
            <summary>
            intern id of process
            </summary>
        </member>
        <member name="F:BotSuite.ApplicationTunnel.AttachedProcess">
            <summary>
            process data
            </summary>
        </member>
        <member name="F:BotSuite.ApplicationTunnel.AttachedProcessModule">
            <summary>
            handle of modul
            </summary>
        </member>
        <member name="F:BotSuite.ApplicationTunnel.ProcessHandle">
            <summary>
            handle of process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="Id">id of process</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.#ctor(System.String)">
            <summary>
            creates a bridge to an application and connect to it by using the name of the corresponding process
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Bridge = new ApplicationTunnel("notepad.exe");
            ]]>
            </code>
            </example>
            <param name="ProcessName">name of process that should be the target process</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Finalize">
            <summary>
            remove all connections to the target process and detach from the process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetProcessIdByName(System.String)">
            <summary>
            get id of process by given name
            </summary>
            <remarks>
            the function returns an array of possible ids since there can be multiple processes having the same name
            </remarks>
            <example>
            <code>
            Process[] ListOfProcess = ApplicationTunnel.GetProcessIdByName("notepad.exe");
            </code>
            </example>
            <param name="name">name of process</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetModuleBase(System.String,System.String)">
            <summary>
            returns the modulbase address
            </summary>
            <param name="ProcName">name of process</param>
            <param name="ModuleName">name of modul</param>
            <remarks>
            in most cases the modul base adress is just 0x401000
            </remarks>
            <example>
            <code>
            <![CDATA[
            Int32 BaseAdress = ApplicationTunnel.GetModuleBase("notepade.exe");
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Hex2Int(System.String)">
            <summary>
            convert a string containing a hex value into integer
            </summary>
            <example>
            <code>
            int result = ApplicationTunnel.Hex2Int("00B28498");
            </code>
            </example>
            <param name="hex">hex</param>
            <returns>result as integer </returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.AttachProcess">
            <summary>
            private function to attach a running process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.DetachProcess">
            <summary>
            private function to detach a running process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.ReadMemoryAtAdress(System.IntPtr,System.UInt32,System.Int32@)">
            <summary>
            private function to read memory
            </summary>
            <param name="MemoryAddress">address</param>
            <param name="bytesToRead">bytes</param>
            <param name="bytesRead">result</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Read``1(System.String,System.Int32[])">
            <summary>
            read a value at a adress
            </summary>
            <example>
            <code>
            <![CDATA[
            // direct access at 00B28498
            int MyValue1 = Trainer.Read<int>("00B28498");
            // direct access at "001AAAC4", 0x464
            int MyValue2 = Trainer.Read<int>("001AAAC4", 0x464);
            float MyValue1 = Trainer.Read<float>("00B28498");
            double MyValue1 = Trainer.Read<double>("00B28498");
            uint MyValue1 = Trainer.Read<uint>("00B28498");
            ]]>
            </code>
            </example>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address as string</param>
            <param name="Offsets">offsets to follow to get value</param>
            <returns>value to read</returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Read``1(System.Int32,System.Int32[])">
            <summary>
            Read a value, see other Read-method
            </summary>
            <example>
            <code>
            <![CDATA[
            // direct access at 00B28498
            int MyValue1 = Trainer.Read<int>(0x00B28498);
            // direct access at "001AAAC4", 0x464
            int MyValue2 = Trainer.Read<int>(0x001AAAC4, 0x464);
            float MyValue1 = Trainer.Read<float>(0x00B28498);
            double MyValue1 = Trainer.Read<double>(0x00B28498);
            uint MyValue1 = Trainer.Read<uint>(0x00B28498);
            ]]>
            </code>
            </example>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address as integer</param>
            <param name="Offsets">offsets to follow to get value</param>
            <returns>value to read</returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteMemoryAtAdress(System.IntPtr,System.Byte[])">
            <summary>
            private function to write at memory
            </summary>
            <param name="MemoryAddress">address</param>
            <param name="bytesToWrite">bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Write``1(System.String,``0,System.Int32[])">
            <summary>
            write a value at memory
            </summary>
            <example>
            <code>
            <![CDATA[
            Memory Trainer = new Memory(...); 
            // direct access at 00B28498 
            Trainer.Write<int>("00B28498", an integer);
            // follow pointer access at "001AAAC4", 0x464
            Trainer.Write<int>("001AAAC4", an integer,0x464);
            Trainer.Write<float>("00B28498", a float var);
            Trainer.Write<double>("00B28498", a double var);
            Trainer.Write<uint>("00B28498", an unsigned integer);
            ]]>
            </code>
            </example>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address to write</param>
            <param name="WriteData">data to write</param>
            <param name="Offsets">offsets</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Write``1(System.Int32,``0,System.Int32[])">
            <summary>
            write value at memory adress
            </summary>
            <example>
            <code>
            <![CDATA[
            Memory Trainer = new Memory(...); 
            // direct access at 00B28498 
            Trainer.Write<int>(0x00B28498, an integer);
            // follow pointer access at "001AAAC4", 0x464
            Trainer.Write<int>(0x001AAAC4, an integer,0x464);
            Trainer.Write<float>(0x00B28498, a float var);
            Trainer.Write<double>(0x00B28498, a double var);
            Trainer.Write<uint>(0x00B28498, an unsigned integer);
            ]]>
            </code>
            </example>
            <typeparam name="T">type of data to write</typeparam>
            <param name="pAddress">address to write</param>
            <param name="WriteData">data to write</param>
            <param name="Offsets">offsets</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteAscii(System.Int32,System.String)">
            <summary>
            Write a string of ASCII
            </summary>
            <example>
            <code>
            <![CDATA[
            Memory Trainer = new Memory(...); 
            // direct access at 00B28498 
            Trainer.Write<int>(0x00B28498, "Hello");
            ]]>
            </code>
            </example>
            <param name="pAddress">address to write</param>
            <param name="StringToWrite">string to write</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteUnicode(System.Int32,System.String)">
            <summary>
            Writes a unicode string
            </summary>
            <param name="pAddress">address to write</param>
            <param name="StringToWrite">string to write</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Pointer(System.Int32,System.Int32[])">
            <summary>
            follow a pointer by start address
            </summary>
            <example>
            <code>
            // start in BaseAddress add follow the pointers by adding the offsets
            int MyPointer2 = Trainer.Pointer( 0x00B28498,0x284, 0xE4, 0xE4, 0x30, 0x108);
            </code>
            </example>
            <param name="start">start address</param>
            <param name="Offsets">offsets</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Pointer(System.String,System.Int32[])">
            <summary>
            follow a pointer by start address
            </summary>
            <example>
            <code>
            // start in 00B28498 add follow the pointers by adding the offsets
            int MyPointer2 = Trainer.Pointer("00B28498", 0x284, 0xE4, 0xE4, 0x30, 0x108);
            </code>
            </example>
            <param name="start">start address</param>
            <param name="Offsets">offsets</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetHandle">
            <summary>
            returns handle of extern process
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Bridge = new ApplicationTunnel("notepad.exe");
            IntPtr hTarget = Bridge.GetHandle();
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Close">
            <summary>
            tries to close the main window of process
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Bridge = new ApplicationTunnel("notepad.exe");
            Bridge.Close();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Kill">
            <summary>
            kills radical the process
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Bridge = new ApplicationTunnel("notepad.exe");
            Bridge.Kill();
            ]]>
            </code>
            </example>
        </member>
        <member name="P:BotSuite.ApplicationTunnel.BaseAddress">
            <summary>
            base adress
            </summary>
        </member>
        <member name="T:BotSuite.Browser">
            <summary>
            just decoration pattern for WebBrowser
            </summary>
        </member>
        <member name="F:BotSuite.Browser.Instance">
            <summary>
            intern instance of browser object
            </summary>
        </member>
        <member name="M:BotSuite.Browser.#ctor(System.Windows.Forms.WebBrowser)">
            <summary>
            initialise browser
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.SetBrowserCompleted(System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            internal call; will be raise if site is loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BotSuite.Browser.ElementExists(System.String)">
            <summary>
            tests if element exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.ClickElementById(System.String)">
            <summary>
            causes a left click at an element
            </summary>
            <param name="id">id of element</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.FillInputById(System.String,System.String)">
            <summary>
            fill an inputfield
            </summary>
            <param name="id">id of input field</param>
            <param name="value">value to fill in</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.NavigateTo(System.String)">
            <summary>
            navigate to an url and wait until it is completely loaded
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.GetInnerNumberById(System.String)">
            <summary>
            get the inner Text (as an integer) of an element
            </summary>
            <param name="id">id of element</param>
            <returns>inner number</returns>
        </member>
        <member name="M:BotSuite.Browser.GetInnerTextById(System.String)">
            <summary>
            get the inner Text of an element
            </summary>
            <param name="id">id of element</param>
            <returns>inner text</returns>
        </member>
        <member name="M:BotSuite.Browser.UseNewIE">
            <summary>
            force the application to use IE8 or IE9
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.CommonRegex.Search(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            search a pattern in a text 
            </summary>
            <param name="Source">text where looking for</param>
            <param name="Pattern">pattern to look for</param>
            <param name="Optionen">Optionen</param>
            <returns>array of result</returns>
        </member>
        <member name="M:BotSuite.CommonRegex.Between(System.String,System.String,System.String)">
            <summary>
            returns a string between two strings
            </summary>
            <param name="Source">text where looking for</param>
            <param name="Start">before the string we are looking for</param>
            <param name="End">after the string we are looking for</param>
            <returns>all results</returns>
        </member>
        <member name="T:BotSuite.ControlArtist">
            <summary>
             This class provide functions to draw on the clientarea without computing the coordinate from absolute to relative
            </summary>
        </member>
        <member name="M:BotSuite.ControlArtist.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            constructor to use this class
            </summary>
            <example>
            <code>
            <![CDATA[
            int LeftMargin = 10;
            int TopMargin = 10;
            int BottomMargin = 10;
            int RightMargin = 100;
            // initialise control artists in form
            ControlArtist BL = new ControlArtist(this.CreateGraphics(), this.ClientRectangle);
            // draw a target rectangle with margin to the clientarea-borders
            BL.DrawRectangle(LeftMargin,TopMargin,RightMargin,BottomMargin);
            ]]>
            </code>
            </example>
            <param name="GF">target graphic</param>
            <param name="CR">clientarea as rectangle</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ControlArtist.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw a rectangle on the control be using margins
            </summary>
            <param name="LeftMargin">margin from left</param>
            <param name="TopMargin">margin from top</param>
            <param name="RightMargin">margin from right(default: 0)</param>
            <param name="BottomMargin">margin from bottom(default: 0)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ControlArtist.GetDrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            same as DrawRectangle but only returns the rectangle without drawing
            </summary>
            <param name="LeftMargin">margin from left</param>
            <param name="TopMargin">margin from top</param>
            <param name="RightMargin">margin from right(default: 0)</param>
            <param name="BottomMargin">margin from bottom(default: 0)</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.DataTypes.Hex32">
            <summary>
            Wrapper for Int32 that represents a hexadecimal number
            </summary>
        </member>
        <member name="F:BotSuite.DataTypes.Hex32.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.DataTypes.Hex32"/> struct.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Implicit(System.Int32)~BotSuite.DataTypes.Hex32">
            <summary>
            Hex32s the specified i.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Implicit(BotSuite.DataTypes.Hex32)~System.Int32">
            <summary>
            Int32s the specified h.
            </summary>
            <param name="h">The h.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.Equals(BotSuite.DataTypes.Hex32)">
            <summary>
            Gibt an, ob das aktuelle Objekt einem anderen Objekt des gleichen Typs entspricht.
            </summary>
            <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
            <returns>
            true, wenn das aktuelle Objekt gleich dem <paramref name="other" />-Parameter ist, andernfalls false.
            </returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.CompareTo(BotSuite.DataTypes.Hex32)">
            <summary>
            Vergleicht das aktuelle Objekt mit einem anderen Objekt desselben Typs.
            </summary>
            <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
            <returns>
            Eine 32-Bit-Ganzzahl mit Vorzeichen, die die relative Reihenfolge der verglichenen Objekte angibt. Der Rückgabewert hat folgende Bedeutung:
            Wert
            Bedeutung
            Kleiner als 0 (null)
            Dieses Objekt ist kleiner als der <paramref name="other" />-Parameter.
            0 (null)
            Dieses Objekt ist gleich <paramref name="other" />.
            Größer als 0 (null)
            Dieses Objekt ist größer als <paramref name="other" />.
            </returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Addition(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            +s the specified h1.
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Subtraction(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            -s the specified h1.
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Multiply(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            *s the specified h1.
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Division(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            /s the specified h1.
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Equality(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            Checks if h1 is equal to h2
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_Inequality(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            Checks if h1 is not equal to h2
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_GreaterThan(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            Checks if h1 is greater then h2
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.DataTypes.Hex32.op_LessThan(BotSuite.DataTypes.Hex32,BotSuite.DataTypes.Hex32)">
            <summary>
            Checks if h1 is smaller then h2
            </summary>
            <param name="h1">The h1.</param>
            <param name="h2">The h2.</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.Encryption">
            <summary>
            class to secure-transfer between objects and files 
            </summary>
        </member>
        <member name="M:BotSuite.Encryption.DecryptAndDeserialize``1(System.String,System.String)">
            <summary>
            load, decrypt and deserialize a binary file 
            </summary>
            <typeparam name="T">type of object to load</typeparam>
            <param name="filename">name of file</param>
            <param name="encryptionKey">key to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Encryption.EncryptAndSerialize``1(System.String,``0,System.String)">
            <summary>
            serialize, encrypt and store an object into a binary file
            </summary>
            <typeparam name="T">type of object to load</typeparam>
            <param name="filename">name of file</param>
            <param name="obj">object to store</param>
            <param name="encryptionKey">key to encrypt</param>
        </member>
        <member name="T:BotSuite.FiniteStateEngine.Pattern.Singleton`1">
            <summary>
            singleton pattern
            </summary>
            <typeparam name="T">type of object</typeparam>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.Pattern.Singleton`1.pInstance">
            <summary>
            private handle
            </summary>
        </member>
        <member name="P:BotSuite.FiniteStateEngine.Pattern.Singleton`1.Instance">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="T:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher">
            <summary>
            class to handle messages
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher.lstDelayedMessages">
            <summary>
            list of messages
            </summary>
        </member>
        <member name="M:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher.DischargeMessage(BotSuite.FiniteStateEngine.StateEngine.Entites.BaseEntity,BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram)">
            <summary>
            discharge message
            </summary>
            <param name="Reciever"></param>
            <param name="Message"></param>
        </member>
        <member name="M:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher.#ctor">
            <summary>
            create new message dispatcher
            </summary>
        </member>
        <member name="M:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher.DispatchMessage(System.Int32,System.Int32,System.Int32,System.Double,System.Object)">
            <summary>
            dispatch a message
            </summary>
            <param name="_Sender">id of sender</param>
            <param name="_Reciever">id of receiver</param>
            <param name="_Message">id of message</param>
            <param name="Delay">time to wait</param>
            <param name="_AdditionalInfo">place for additional information or parameter</param>
        </member>
        <member name="M:BotSuite.FiniteStateEngine.StateEngine.Messaging.MessageDispatcher.HandleDelayedMessages">
            <summary>
            handle messages
            </summary>
        </member>
        <member name="T:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram">
            <summary>
            contains all information of a telegram
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.Sender">
            <summary>
            id of sender
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.Reciever">
            <summary>
            id of receiver
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.Message">
            <summary>
            id of message
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.DispatchTime">
            <summary>
            time window when message should be send
            </summary>
        </member>
        <member name="F:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.AdditionalInfo">
            <summary>
            place for additional information or parameter
            </summary>
        </member>
        <member name="M:BotSuite.FiniteStateEngine.StateEngine.Messaging.Telegram.#ctor(System.Int32,System.Int32,System.Int32,System.DateTime,System.Object)">
            <summary>
            construct a telegram
            </summary>
            <param name="_Sender">id of sender</param>
            <param name="_Reciever">id of receiver</param>
            <param name="_Message">id of message</param>
            <param name="_DispatchTime">time window when message should be send</param>
            <param name="_AdditionalInfo">place for additional information or parameter</param>
        </member>
        <member name="T:BotSuite.ImageLibrary.CommonFunctions">
            <summary>
            collection of common functions
            </summary>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.ColorsSimilar(System.Drawing.Color,System.Drawing.Color,System.UInt32)">
            <summary>
            Tests if the colors are similar.
            </summary>
            <remarks>
            the tolerance has to be within the interval 0..255 and no bigger difference in each color channel is allowed
            </remarks>
            <example>
            <code>
            <![CDATA[
            Color A = Color.White;
            Color B = Color.Blue;
            bool similar = CommonFunctions.ColorsSimilar(A,B,50);
            bool match   = CommonFunctions.ColorsSimilar(A,B,0);
            ]]>
            </code>
            </example>
            <param name="one">Color A</param>
            <param name="two">Color B</param>
            <param name="tolerance">Tolerance (0,...,255)</param>
            <returns>Similar or not</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.AverageRGBValues(BotSuite.ImageLibrary.ImageData,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the average RGB values from a given rectangle in an image
            By default the average RGB values from the whole image are calculated
            </summary>
            <remarks>
            to detect the color of bubbles or coins this function can be helpful in connection with IdentifyColor()
            </remarks>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // average color in whole image
            double[] AverageColor = CommonFunctions.AverageRGBValues(img);
            int left = 0;
            int top = 5;
            // average color in clipped image
            double[] AverageColorShifted = CommonFunctions.AverageRGBValues(img,left,top);
            int width = 50;
            int height = 100;
            // average color in predefined rectangle
            double[] AverageColorRectangle = CommonFunctions.AverageRGBValues(img,left,top,width,height);
            ]]>
            </code>
            </example>
            <param name="img">The image to process</param>
            <param name="left">The left of the rectangle (default=0)</param>
            <param name="top">The top of the rectangle (default=0)</param>
            <param name="width">The width of the rectangle (default=full width)</param>
            <param name="height">The height of the rectangle (default=full height)</param>
            <returns>The average RGB values</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.AverageColor(BotSuite.ImageLibrary.ImageData,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the average color from an image in a given rectangle
            By default the the average color from the whole image is calculated
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // average color in whole image
            double[] AverageColor = CommonFunctions.AverageRGBValues(img);
            // average color in predefined rectangle
            Color AverageColorInRectangle = CommonFunctions.AverageRGBValues(img,left,top,width,height);
            ]]>
            </code>
            </example>
            <param name="img">The image to process</param>
            <param name="left">The left of the rectangle (default=0)</param>
            <param name="top">The top of the rectangle (default=0)</param>
            <param name="width">The width of the rectangle (default=full width)</param>
            <param name="height">The height of the rectangle (default=full height)</param>
            <returns>average color</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.Similarity(BotSuite.ImageLibrary.ImageData,BotSuite.ImageLibrary.ImageData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the similarity of image "img" in a given rectangle and a reference image "reference"
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Screenshot = new ImageData(...);
            ImageData Coin = new ImageData(...);
            // do magic or using a clipped region of screenshot (500px from left and 100px from top)
            int left_region = 500;
            int top_region = 100;
            double measure = Similarity(Screenshot,Coin,left_region,top_region);
            ]]>
            </code>
            </example>
            <param name="img">Image A</param>
            <param name="reference">Image B</param>
            <param name="left">The offset from left of image A</param>
            <param name="top">The offset from top of image A</param>
            <param name="width">The width of the rectangle (default: full width)</param>
            <param name="height">The height of the rectangle (default: full height)</param>
            <param name="offsetLeft">The left offset</param>
            <param name="offsetTop">The top offset</param>
            <returns>The similarity result (1=exact, 0=none)</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.IdentifyColor(BotSuite.ImageLibrary.ImageData,System.Collections.Generic.Dictionary{System.Drawing.Color,System.Collections.Generic.List{System.Double}},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Identifies the colors of the pixels in a rectangle from an image by a given list of
            reference colors (root means square error
            from average)
            </summary>
            <remarks>
            if the color differs sometimes you can use this function to find the best matching colors in a dictionary list. 
            In most you do not need to know the exact rgb values. You only wants to know whether the rectangle is more likely to the color 
            red, blue, rgb(?,?,?), ....
            
            this functions maps the result to the correct color. If the image contains a pale red and you want to identify this as #ff0000 
            you have to add the pair (#FF8C8C "pale red", #FF0000)
            
            This uses the RMSE root mean square error to find the best color. 
            Attention! If there are some pixel that have to complete other colors, they can destroy the accurately 
            see: IdentifyColorByVoting
            </remarks>
            <example>
            <code>
            <![CDATA[
            ImageData Screenshot = new ImageData(...);
            Dictionary<Color, List<double>> Choose = new Dictionary<Color, List<double>> ();
            Choose.Add(Color.Red,    new List<double> { 255, 144.23, 140.89 });
            Choose.Add(Color.White,  new List<double> { 218, 219, 222 });
            Choose.Add(Color.Blue,   new List<double> { 21, 108, 182 });
            Choose.Add(Color.Green,  new List<double> { 86, 191, 50 });
            Choose.Add(Color.Yellow, new List<double> { 233, 203, 118 });
            Choose.Add(Color.Orange, new List<double> { 246, 122, 11 });
            Choose.Add(Color.Black,  new List<double> { 94, 98, 98 });
            Choose.Add(Color.Violet, new List<double> { 223, 80, 195 });
            Choose.Add(Color.MediumSeaGreen,  new List<double> { 106, 227, 216 });
            // ...
            Color PieceColor = CommonFunctions.IdentifyColor(Screenshot,Choose,leftoffset,topoffset,width,height);
            ]]>
            </code>
            </example>
            <param name="img">The image that should be analyzed</param>
            <param name="statReference">The list of possible colors</param>
            <param name="left">The left of the rectangle (default: 0)</param>
            <param name="top">The top of the rectangle (default: 0)</param>
            <param name="width">The width of the rectangle (default: full width)</param>
            <param name="height">The height of the rectangle (default: full height)</param>
            <returns>The best matching color</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.IdentifyColorByVoting(BotSuite.ImageLibrary.ImageData,System.Collections.Generic.Dictionary{System.Drawing.Color,System.Collections.Generic.List{System.Double}},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Identifies the colors of the pixels in a rectangle and compares them with those from an image by a given list of
            reference colors (majority vote)
            </summary>
            <remarks>
            This tests every pixel in the given rectangle and majority votes the color from the given dictionary of possible
            colors. Each pixel votes for a color.
            
            if the image patch is 
            
            " red red  "
            " red blue "
            
            then 4 pixels vote for similary colors to red and one pixel votes for a similar color to blue
            
            </remarks>
            <example>
            <code>
            <![CDATA[
            ImageData Screenshot = new ImageData(...);
            Dictionary<Color, List<double>> Choose = new Dictionary<Color, List<double>> ();
            Choose.Add(Color.Red,    new List<double> { 255, 144.23, 140.89 });
            Choose.Add(Color.White,  new List<double> { 218, 219, 222 });
            Choose.Add(Color.Blue,   new List<double> { 21, 108, 182 });
            Choose.Add(Color.Green,  new List<double> { 86, 191, 50 });
            Choose.Add(Color.Yellow, new List<double> { 233, 203, 118 });
            Choose.Add(Color.Orange, new List<double> { 246, 122, 11 });
            Choose.Add(Color.Black,  new List<double> { 94, 98, 98 });
            Choose.Add(Color.Violet, new List<double> { 223, 80, 195 });
            Choose.Add(Color.MediumSeaGreen,  new List<double> { 106, 227, 216 });
            // ...
            Color PieceColor = CommonFunctions.IdentifyColorByVoting(Screenshot,Choose,leftoffset,topoffset,width,height);
            ]]>
            </code>
            </example>
            <param name="img">The image to look in</param>
            <param name="statReference">The list of possible colors</param>
            <param name="left">The left of the rectangle (default: 0)</param>
            <param name="top">The top of the rectangle (default: 0)</param>
            <param name="width">The width of the rectangle (default: full width)</param>
            <param name="height">The height of the rectangle (default: full height)</param>
            <returns>The best matching color</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.IdentifyColor(System.Drawing.Color,System.Collections.Generic.Dictionary{System.Drawing.Color,System.Collections.Generic.List{System.Double}})">
            <summary>
            Identifies the best matching color from a list of colors
            </summary>
            <remarks>
            In the example the color #FF8C8C "pale red" would be identify as red
            </remarks>
            <example>
            <code>
            <![CDATA[
            Dictionary<Color, List<double>> Choose = new Dictionary<Color, List<double>> ();
            Choose.Add(Color.Red,    new List<double> { 255, 0, 0 });
            Choose.Add(Color.White,  new List<double> { 218, 219, 222 });
            Choose.Add(Color.Blue,   new List<double> { 21, 108, 182 });
            Choose.Add(Color.Green,  new List<double> { 86, 191, 50 });
            Choose.Add(Color.Yellow, new List<double> { 233, 203, 118 });
            Choose.Add(Color.Orange, new List<double> { 246, 122, 11 });
            Choose.Add(Color.Black,  new List<double> { 94, 98, 98 });
            Choose.Add(Color.Violet, new List<double> { 223, 80, 195 });
            Choose.Add(Color.MediumSeaGreen,  new List<double> { 106, 227, 216 });
            // ...
            Color PieceColor = CommonFunctions.IdentifyColor(Color.FromArgb(255,140,140),Choose);
            ]]>
            </code>
            </example>
            <param name="givenColor">The color to look for</param>
            <param name="statReference">The list of colors</param>
            <returns>The best matching color from the list</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.IdentifyImage(BotSuite.ImageLibrary.ImageData,System.Collections.Generic.Dictionary{System.String,BotSuite.ImageLibrary.ImageData})">
            <summary>
            Identifies the best matching image from a list of images
            </summary>
            <example>
            <code>
            <![CDATA[
            Dictionary<string, ImageData> Choose = new Dictionary<string, ImageData> ();
            Choose.Add("coin",    new ImageData("coin.bmp"));
            Choose.Add("enemy",   new ImageData("warrior.bmp"));
            Choose.Add("water",    new ImageData("blue_piece.bmp"));
            // ...
            string PieceColor = CommonFunctions.IdentifyImage(new ImageData("unkown.bmp"),Choose);
            ]]>
            </code>
            </example>
            <remarks>
            If you want to compare an image patch to a collection of interesting images, you can use this 
            function to find the best matching from the given list
            </remarks>
            <param name="img">The image to look for</param>
            <param name="statReference">The list of images</param>
            <returns>The name of the best matching image in the list</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.ColorDifference(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Calculates the difference between two colors (a-b)
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.ExtractRedChannel(BotSuite.ImageLibrary.ImageData)">
            <summary>
            Retrieves the red channel as an array
            </summary>
            <param name="img">image</param>
            <returns>The red channel as an array</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.FindColors(BotSuite.ImageLibrary.ImageData,System.Drawing.Color,System.UInt32)">
            <summary>
            Finds all pixels matching a specified color
            </summary>
            <example>
            <code>
            <![CDATA[
            List<Point> WaterPixel = CommonFunctions.FindColors(ScreenShot.create(),Color.Blue,20);
            ]]>
            </code>
            </example>
            <param name="img">The image to look in</param>
            <param name="searchColor">The color to look for</param>
            <param name="tolerance">The tolerance to use</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.CommonFunctions.FindColors(BotSuite.ImageLibrary.ImageData,System.Drawing.Color,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Finds all pixels matching a specified color
            /accelerated/
            </summary>
            <remarks>
            this function skips in both dimension (x and y) a predefined amount of pixels in each iteration.
            You can use this function to test every n-th pixel
            </remarks>
            <param name="img">The image to look in</param>
            <param name="searchColor">The color to look for</param>
            <param name="skipX">The X pixels to skip each time</param>
            <param name="skipY">The Y pixels to skip each time</param>
            <param name="tolerance">The tolerance to use</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.ImageLibrary.Filter">
            <summary>
            collection of filters
            </summary>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Add(BotSuite.ImageLibrary.ImageData@,BotSuite.ImageLibrary.ImageData)">
            <summary>
            add two images
            </summary>
            <param name="Img">ref Image</param>
            <param name="Summand">image to add</param>
            <example>
            <code>
            <![CDATA[
            ImageData Original = new ImageData(...);
            ImageData Summand = new ImageData(...);
            // apply filter to original
            Filter.Add(ref Original,Summand);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Difference(BotSuite.ImageLibrary.ImageData@,BotSuite.ImageLibrary.ImageData)">
            <summary>
            subtract two images
            </summary>
            <param name="Img">ref images</param>
            <param name="Subtrahend">subtrahend</param>
            <example>
            <code>
            <![CDATA[
            ImageData Original = new ImageData(...);
            ImageData Subtrahend = new ImageData(...);
            // apply filter to original
            Filter.Difference(ref Original,Subtrahend);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.BlackAndWhite(BotSuite.ImageLibrary.ImageData@,System.UInt32)">
            <summary>
            black and white image by replace 
            all similar color to black by blackand 
            all similiar colors to white by white
            </summary>
            <param name="Img">ref image</param>
            <param name="Tolerance">tolerance (0,...,255)</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            Filter.Grayscale(ref Img);
            // apply filter to original
            Filter.BlackAndWhite(ref Img,90);
            ]]>
            </code>
            </example>
            <see cref="!:blackandwhite"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.ReplaceSimilarColor(BotSuite.ImageLibrary.ImageData@,System.Drawing.Color,System.Drawing.Color,System.UInt32)">
            <summary>
            replace color by another color
            </summary>
            <param name="Img">ref Image</param>
            <param name="SearchColor">color to look for</param>
            <param name="ReplaceColor">color to replace with</param>
            <param name="Tolerance">tolerance of reference color (0,...,255)</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to original and replace all colors 
            // which seems to be blue (tolerance 130) by red
            Filter.ReplaceSimilarColor(ref Img,Color.Blue,Color.Red,130);
            ]]>
            </code>
            </example>
            <see cref="!:replacecolor"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.ReplaceDifferentColor(BotSuite.ImageLibrary.ImageData@,System.Drawing.Color,System.Drawing.Color,System.UInt32)">
            <summary>
            replace color by another color by ignore a color
            </summary>
            <param name="Img">ref Image</param>
            <param name="SearchColor">color to ignore</param>
            <param name="ReplaceColor">color to replace with</param>
            <param name="Tolerance">tolerance of reference color (0,...,255)</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to original and replace all colors
            // which DOESN'T seems to be blue (tolerance 25) by red
            Filter.ReplaceDifferentColor(ref Img,Color.Blue,Color.Red,25);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Grayscale(BotSuite.ImageLibrary.ImageData@)">
            <summary>
            Convert image to grayscale
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to original and convert to grayscale
            Filter.Grayscale(ref Img);
            ]]>
            </code>
            </example>
            <see cref="!:gray"/>
            <param name="Img">ref image to convert</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Invert(BotSuite.ImageLibrary.ImageData@)">
            <summary>
            invert image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to original and  invert
            Filter.Invert(ref Img);
            ]]>
            </code>
            </example>
            <see cref="!:invert"/>
            <param name="Img">ref image to convert</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.MarkPoint(BotSuite.ImageLibrary.ImageData@,System.Drawing.Point,System.Drawing.Color,System.UInt32)">
            <summary>
            mark a point in image 
            </summary>
            <param name="Img">ref image to mark</param>
            <param name="Location">where to set marker</param>
            <param name="MarkColor">color of marker</param>
            <param name="Size">size of marker (square)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Sepia(BotSuite.ImageLibrary.ImageData@)">
            <summary>
            Convert image to sepia
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to original and convert to sepia
            Filter.Sepia(ref Img);
            ]]>
            </code>
            </example>
            <see cref="!:sepia"/>
            <param name="Img">ref image to convert</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Threshold(BotSuite.ImageLibrary.ImageData@,System.UInt32)">
            <summary>
            apply threshold
            </summary>
            <param name="Img">ref Image</param>
            <param name="threshold">threshold (0,...,255)</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // it's better to grayscale first
            Filter.Grayscale(ref Img);
            // apply filter to image
            Filter.Threshold(ref Img, 20);
            ]]>
            </code>
            </example>
            <see cref="!:threshold"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Contrast(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            change the contrast of an image
            </summary>
            <param name="Img">image to manipilate</param>
            <param name="contrast">value of contrast</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.Contrast(ref Img, 50.0);
            ]]>
            </code>
            </example>
            <see cref="!:contrast"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Brightness(BotSuite.ImageLibrary.ImageData@,System.Int32)">
            <summary>
            change the brightness of an image
            </summary>
            <param name="Img">image to manipulate</param>
            <param name="brightness">brightness of new image</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.Brightness(ref Img, 10);
            ]]>
            </code>
            </example>
            <see cref="!:brightness"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.DecreaseColourDepth(BotSuite.ImageLibrary.ImageData@,System.Int32)">
            <summary>
            decrease the depth of color
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.DecreaseColourDepth(ref Img, 40);
            ]]>
            </code>
            </example>
            <param name="Img">image to manipulate</param>
            <param name="offset">offset of colordepth</param>
            <see cref="!:decreasecolourdepth"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Emboss(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            apply emboss effect on image
            </summary>
            <param name="Img">image to manipulate</param>
            <param name="weight">weight of emboss effect</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.Emboss(ref Img, 4.0);
            ]]>
            </code>
            </example>
            <see cref="!:emboss"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.GaussianBlur(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            apply gaussianblur to image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.GaussianBlur(ref Img, 20.0);
            ]]>
            </code>
            </example>
            <param name="Img">image to manipulate</param>
            <param name="peakValue">parameter</param>
            <see cref="!:gaussian"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Sharpen(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            sharpen an image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.Sharpen(ref Img, 4.0);
            ]]>
            </code>
            </example>
            <param name="Img">image to manipulate</param>
            <param name="weight">weight</param>
            <see cref="!:sharpen"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.RemoveMean(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            remove mean of image
            </summary>
            <param name="Img">image to manipulate</param>
            <param name="weight">weight of effect</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.RemoveMean(ref Img, 10.0);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.Blur(BotSuite.ImageLibrary.ImageData@,System.Double)">
            <summary>
            blur the image
            </summary>
            <param name="Img">image to manipulate</param>
            <param name="weight">weight of effect</param>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.Blur(ref Img, 30.0);
            ]]>
            </code>
            </example>
            <see cref="!:blur"/>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Filter.FindEdges(BotSuite.ImageLibrary.ImageData@)">
            <summary>
            marks the edges black and all other pixels white
            </summary>
            <param name="Img">image to manipulate</param>
            <see cref="!:findedges"/>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // apply filter to image
            Filter.FindEdges(ref Img);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="T:BotSuite.ImageLibrary.ImageData">
            <summary>
            class of faster image manipulation (by 600times faster than to default bitmap class)
            support 24bit and 32bit bitmap import
            and 24bit bitmap output
            </summary>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.#ctor(System.Drawing.Bitmap)">
            <summary>
            creates a new imagedata object from a given bitmap
            </summary>
            <example>
            <code>
            <![CDATA[
            Bitmap Bmp = new Bitmap(...);
            ImageData Img = new ImageData(Bmp);
            ]]>
            </code>
            </example>
            <param name="Bitmap">tagert bitmap</param>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.#ctor(System.String)">
            <summary>
            creates a new imagedata object from a file
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData("path/to/bitmap/file.bmp");
            ]]>
            </code>
            </example>
            <param name="Path">path to bitmap</param>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.#ctor(BotSuite.ImageLibrary.ImageData)">
            <summary>
            creates a new imagedata object from another imagedata object
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            ImageData Img2 = new ImageData(Img);
            ]]>
            </code>
            </example>
            <param name="Path">path to bitmap</param>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.Save(System.String)">
            <summary>
            store a bitmap into a file
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            Img.Save("path/to/bitmap/file.bmp");
            ]]>
            </code>
            </example>
            <param name="Path">savepath</param>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.Clone">
            <summary>
            clones an imagedata object
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            ImageData Img2 = Img.Clone();
            ]]>
            </code>
            </example>
            <returns>new imagedata object</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            get image as 24bit bitmap or a part (rectangle) of it
            </summary>
            <param name="L">left of imagepart (default: 0 no offset)</param>
            <param name="T">top of imagepart (default: 0 no offset)</param>
            <param name="W">width of imagepart (default: full width) </param>
            <param name="H">height of imagepart (default: full height)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.GetPixel(System.Int32,System.Int32)">
            <summary>
            get color of pixel
            </summary>
            <param name="x">x coordinate (column)</param>
            <param name="y">y coordinate (row)</param>
            <returns>color of pixel</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            set color of pixel 
            </summary>
            <param name="x">x coordinate (column)</param>
            <param name="y">y coordinate (row)</param>
            <param name="Color">color to set</param>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.Resize(System.Double,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            resize an image by a factor
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // downscale an image to 80% of the original size
            ImageData ResizedImg = Img.Resize(0.8);
            
            // or use another interpolation mode
            ImageData ResizedImg2 = Img.Resize(0.8,InterpolationMode.Bilinear);
            ]]>
            </code>
            </example>
            <param name="Factor">Factor (0.80 means downscale by 80%)</param>
            /// <param name="Mode">Mode of Interpolation (Default: HighQualityBicubic, Possible parameter: HighQualityBicubic,HighQualityBilinear,Bilinear,...)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.ImageData.Resize(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            resize an image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            // downscale to image of size 100px x 120px
            ImageData ResizedImg = Img.Resize(100,120);
            
            // or use another Interpolationmode
            ImageData ResizedImg2 = Img.Resize(100,120,InterpolationMode.Bilinear);
            ]]>
            </code>
            </example>
            <param name="NewWidth">new Width of image</param>
            <param name="NewHeight">new Height of image</param>
            <param name="Mode">Mode of Interpolation (Default: HighQualityBicubic, Possible parameter: HighQualityBicubic,HighQualityBilinear,Bilinear,...)</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BotSuite.ImageLibrary.ImageData.Size" -->
        <member name="P:BotSuite.ImageLibrary.ImageData.Bitmap">
            <summary>
            set a 24bit or 32bit bitmap
            or returns a 24bit bitmap
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            Bitmap Bmp = Img.Bitmap;
            Bitmap Bmp2 = new Bitmap(...);
            Img.Bitmap = Bmp2;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:BotSuite.ImageLibrary.ImageData.Item(System.Int32,System.Int32)">
            <summary>
            get or set pixel color
            </summary>
            <param name="x">x coordinate (column)</param>
            <param name="y">y coordinate (row)</param>
            <returns>color of pixel</returns>
        </member>
        <member name="T:BotSuite.ImageLibrary.Template">
            <summary>
            serach for patterns or images in a image
            </summary>
        </member>
        <member name="M:BotSuite.ImageLibrary.Template.BinaryPattern(BotSuite.ImageLibrary.ImageData,System.Int32[0:,0:],System.UInt32)">
            <summary>
            Searches for a binary pattern
            </summary>
            <param name="img">The image to look in</param>
            <param name="pattern">The pattern to look for</param>
            <param name="tolerance">Tolerance (0,...,255)</param>
            <example>
            <code>
            <![CDATA[
            ImageData img = new ImageData(...);
            int[,] pattern = new int[,] {   
                    {1,1,0,0,0,0,0,0},
                    {0,0,1,0,0,0,0,0},
                    {0,0,1,0,0,0,0,0},
                    {0,1,0,0,0,0,0,0},
                    {1,0,0,0,0,0,0,0},
                    {1,1,1,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0}
                };
            Rectangle location = Template.BinaryPattern(img, pattern, 2);
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Template.ToMultiArrayBool(System.Int32[0:,0:])">
            <summary>
            Converts an Integer MultiArray to a Boolean MultiArray
            </summary>
            <param name="input">The input Integer MultiArray</param>
            <returns>The Boolean MultiArray</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Template.Image(BotSuite.ImageLibrary.ImageData,BotSuite.ImageLibrary.ImageData,System.UInt32)">
            <summary>
            Searches for an image in another image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            ImageData Search= new ImageData(...);
            // search with tolerance 25
            Rectangle Position = Template.Image(Img,Search,25);
            ]]>
            </code>
            </example>
            <param name="img">Image to look in</param>
            <param name="Ref">Image to look for</param>
            <param name="tolerance">Tolerance of similarity (0,...,255)</param>
            <returns>The best matching position as a rectangle</returns>
        </member>
        <member name="M:BotSuite.ImageLibrary.Template.AllImages(BotSuite.ImageLibrary.ImageData,BotSuite.ImageLibrary.ImageData,System.UInt32)">
            <summary>
            Searches for an image in another image
            </summary>
            <example>
            <code>
            <![CDATA[
            ImageData Img = new ImageData(...);
            ImageData Search= new ImageData(...);
            // search with tolerance 25
            List<Rectangle> Positions = Template.AllImages(Img,Search,25);
            ]]>
            </code>
            </example>
            <param name="img">Image to look in</param>
            <param name="Ref">Image to look for</param>
            <param name="tolerance">Tolerance of similarity (0,...,255)</param>
            <returns>A Rectangle list of matching positions</returns>
        </member>
        <member name="T:BotSuite.IniParser">
            <summary>
            class to handle ini files
            </summary>
        </member>
        <member name="F:BotSuite.IniParser.Path">
            <summary>
            path to ini file
            </summary>
        </member>
        <member name="M:BotSuite.IniParser.#ctor(System.String)">
            <summary>
            handles ini files
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("\config.ini");
            // write something
            Config.Write("SomeVariable", "ValueToWrite");
            // read something
            string Get = Config.Read("SomeVariable");
            ]]>
            </code>
            </example>
            <param name="IniPath">file to open, either a relative or a absolute path (relative pathes start with "\"
            and for can only be pathes the same level as executable or below in file tree) --- UNCs not supported at the moment!</param>
        </member>
        <member name="M:BotSuite.IniParser.Write(System.String,System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            Config.Write("Section", "Variable", "Value");
            ]]>
            </code>
            </example>
            <param name="Section">section in ini file</param>
            <param name="Key">name of variable</param>
            <param name="Value">value of variable</param>
        </member>
        <member name="M:BotSuite.IniParser.Write(System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            Config.Write("Variable", "Value");
            ]]>
            </code>
            </example>
            <param name="Key">name of variable</param>
            <param name="Value">value of variable</param>
        </member>
        <member name="M:BotSuite.IniParser.Read(System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            string Get = Config.Read("Section", "Variable");
            ]]>
            </code>
            </example>
            <param name="Section">section in ini file</param>
            <param name="Key">name of variable</param>
            <returns>value of variable</returns>
        </member>
        <member name="M:BotSuite.IniParser.Read(System.String)">
            <summary>
            reads an information from the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            string Get = Config.Read("Variable");
            ]]>
            </code>
            </example>
            <param name="Key">name of variable</param>
            <returns>value of variable</returns>
        </member>
        <member name="T:BotSuite.Keyboard">
            <summary>
            A class that manages a global low level keyboard hook
            </summary>
            <remarks>
            Singleton-Pattern
            </remarks>
        </member>
        <member name="F:BotSuite.Keyboard.HookedKeys">
            <summary>
            The collections of keys to watch for
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.HookedKeys.Add(Keys.F5);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:BotSuite.Keyboard.hhook">
            <summary>
            Handle to the hook, need this to unhook and call the next hook
            </summary>
        </member>
        <member name="M:BotSuite.Keyboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:globalKeyboardHook"/> class and installs the keyboard hook.
            </summary>
            <remarks>
            use the whole class by the code from the example!
            </remarks>
            <example>
            <code>
            <![CDATA[
            Keyboard.HookedKeys.Add(Keys.F5);
            Keyboard.KeyDown += new KeyEventHandler(MyKeyDownRoutine);
            Keyboard.KeyUp += new KeyEventHandler(MyKeyUpRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:BotSuite.Keyboard.Finalize">
            <summary>
            unmanaged resources were released and other cleanup operations were performed before the
            <see cref="!:globalKeyboardHook"/> is reclaimed by garbage collection and uninstalls the keyboard hook.
            </summary>
            <remarks>
            destructor
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.hook">
            <remarks>
            this is a private method. You cannot us it! See the constructor #ctor for an example.
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.unhook">
            <summary>
            removes the global hook
            </summary>
            <remarks>
            this is a private method. You cannot us it! See the constructor #ctor for an example.
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.hookProc(System.Int32,System.Int32,BotSuite.NativeMethods.keyboardHookStruct@)">
            <summary>
            callback for the keyboard hook
            </summary>
            <param name="code">hook code, do sth iff >=0</param>
            <param name="wParam">event type</param>
            <param name="lParam">keyhook event information</param>
            <remarks>
            this is a private method. You cannot us it! See the constructor #ctor for an example.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Keyboard.Type(System.String)">
            <summary>
            types a key or o sequence of keys
            </summary>
            <example>
            <code>
            Keyboard.Type("{ENTER}"); // click the enter button
            Keyboard.Type("ENTER");   // types "E","N","T","E","R"
            </code>
            </example>
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.aspx
            </remarks>
            <param name="Sequence">Sequence to type</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Keyboard.Type(System.String,System.IntPtr)">
            <summary>
            types a key or o sequence of keys to an application (by set the application to foreground)
            </summary>
            <example>
            <code>
            IntPtr hWnd = something;
            Keyboard.Type("{ENTER}",hWnd); // click the enter button
            Keyboard.Type("ENTER",hWnd);   // types "E","N","T","E","R"
            // or send it to a specific window 
            </code>
            </example>
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.aspx
            </remarks>
            <param name="Sequence">Sequence to type</param>
            <param name="hWnd">target application</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Keyboard.TypeToHiddenWindow(System.Windows.Forms.Keys[],System.IntPtr)">
            <summary>
            send keys as an array to a hidden window
            </summary>
            <param name="Key">array of keys to send</param>
            <param name="hWnd">handle of window</param>
        </member>
        <member name="M:BotSuite.Keyboard.TypeToHiddenWindow(System.Windows.Forms.Keys,System.IntPtr)">
            <summary>
            send a key to a hidden window
            </summary>
            <param name="Key">key to send</param>
            <param name="hWnd">handle of window</param>
        </member>
        <member name="M:BotSuite.Keyboard.HoldKey(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Hold down a key for a specific time
            </summary>
            <example>
            <code>
            Keyboard.HoldKey(Keys.A, 250); // Holds down the "A" key for 250ms
            Keyboard.HoldKey(Keys.Left, 1000); // Holds down "Left" key for 1 second
            </code>
            </example>
            <param name="key">key to hold</param>
            <param name="duration">duration </param>
        </member>
        <member name="M:BotSuite.Keyboard.Alas(System.Windows.Forms.Keys)">
            <summary>
            Nappi alas
            </summary>
            <param name="key">Nappula, joka alas painetaan</param>
        </member>
        <member name="M:BotSuite.Keyboard.Ylos(System.Windows.Forms.Keys)">
            <summary>
            Nappula ylös
            </summary>
            <param name="key">Nappula, joka ylös nostetaan</param>
        </member>
        <member name="M:BotSuite.Keyboard.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            test if a key is pressed
            </summary>
            <example>
            <code>
            // test if F1 is currently pressed
            bool pressed = Keyboard.IsKeyDown(Keys.F1);
            </code>
            </example>
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.windows.forms.keys
            </remarks>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="E:BotSuite.Keyboard.KeyDown">
            <summary>
            Occurs when one of the hooked keys is pressed
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.KeyDown += new KeyEventHandler(MyKeyDownRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="E:BotSuite.Keyboard.KeyUp">
            <summary>
            Occurs when one of the hooked keys is released
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.KeyUp += new KeyEventHandler(MyKeyUpRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.BipolarSigmoidActivationFunction">
            <summary>
            The bipolar sigmoid activation function
            </summary>
            <remarks>
            f(x)  = -1+ 2/(1+exp(-beta*x)
            f'(x) = beta/2*(1-f(x)*f(x))   
            </remarks>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.BipolarSigmoidActivationFunction._beta">
            <summary>
            inter parameter
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.BipolarSigmoidActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.BipolarSigmoidActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.BipolarSigmoidActivationFunction.Beta">
            <summary>
            get or set parameter beta of function
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction">
            <summary>
            The gaussian activation function
            </summary>
            <remarks>
            using normal probability density function
            </remarks>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction">
            <summary>
            interface for activations functions
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction.Function(System.Single)">
            <summary>
            calculates the value of the activation function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction.Derivative(System.Single)">
            <summary>
            calculates the value of the derivative of the activation function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative</returns>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction._sigma">
            <summary>
            intern standard devariance
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction._double_sigma_square_reziproke">
            <summary>
            intern values for faster computation
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction._mu">
            <summary>
            intern means parameter
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction._normalisation">
            <summary>
            intern factor = 1/(2*pi*_sigma)
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction.Sigma">
            <summary>
            get or set standard devariance
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.GaussianActivationFunction.Mu">
            <summary>
            set or get mean
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.HeavisideActivationFunction">
            <summary>
            The heaviside activation function
            </summary>
            <remarks>
            f(x) = 1_]0,infty[ (x)
            </remarks>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.HeavisideActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.HeavisideActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x (ok only something like that, becaus we cannot build the derivative of this funtion)
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction">
            <summary>
            The linear activation function
            </summary>
            <remarks>
            piecewise linear: in  ]-0.5/k,0.5/k[ is A * x + 0.5 otherwise 1 or zero  
            </remarks>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction._k">
            <summary>
            private variable for intervall
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction._hinge">
            <summary>
            hinge point
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.LinearActivationFunction.K">
            <summary>
            set or get parameter K to manipulate the piecewise linear function
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.SigmoidActivationFunction">
            <summary>
            The sigmoid activation function
            </summary>
            <remarks>
            f(x)  = (1+exp(-beta*x))^-1
            f'(x) = beta * f(x) * ( 1 - f(x) )      
            </remarks>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.SigmoidActivationFunction._beta">
            <summary>
            parameter of sigmoid function
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.SigmoidActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.SigmoidActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.SigmoidActivationFunction.Beta">
            <summary>
            Set or Get the parameter of the sigmoid function
            </summary>
        </member>
        <member name="T:BotSuite.BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.TanhActivationFunction">
            <summary>
            The tanh activation function
            </summary>
            <remarks>
            f(x)  = tanh(x)
            f'(x) = 1-f(x)^2
            </remarks>
        </member>
        <member name="M:BotSuite.BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.TanhActivationFunction.Function(System.Single)">
            <summary>
            get the value of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of function in x</returns>
        </member>
        <member name="M:BotSuite.BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.TanhActivationFunction.Derivative(System.Single)">
            <summary>
            get the value of the derivative of the function in x
            </summary>
            <param name="x">parameter x</param>
            <returns>value of derivative in x</returns>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.Layer">
            <summary>
            organize the neurons
            </summary> 
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Layer._neurons_in_layer">
            <summary>
            number of neurons in layers
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Layer._inputs_of_layer">
            <summary>
            number of inputs
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Layer._neurons">
            <summary>
            internal array of neurons
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Layer._output">
            <summary>
            the output ofthe layer
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.#ctor(System.Int32,System.Int32,BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction)">
            <summary>
            initialise a layer containing x inputs and n neurons
            </summary>
            <param name="NumberOfInputs">how many inputs do we have</param>
            <param name="NumberOfNeurons">how many neurons should this layer contain</param>
            <param name="f">activation function foreach neuron in this layer</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.ShuffleWeight">
            <summary>
            set random weights to each neuron
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.ShuffleThreshold">
            <summary>
            set random thresholds to each neuron
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.ShuffleBoth">
            <summary>
            everything is random in this layer
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.SetIntervalForPRNG(System.Single,System.Single)">
            <summary>
            Set the randomization interval for all neurons
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Layer.Signal(System.Single[])">
            <summary>
            get the signal from each neuron as a vector
            </summary>
            <param name="input">input vector</param>
            <returns>vector of neuron output</returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Layer.ActivationFunction">
            <summary>
            set activation function for all neurons in layer
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Layer.NeuronsInLayer">
            <summary>
            get number of neurons in current layer
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Layer.InputsOfLayer">
            <summary>
            get number of inputs in current layer
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Layer.Item(System.Int32)">
            <summary>
            pointer to specific neuron
            </summary>
            <param name="NeuronIdx">index of neuron</param>
            <returns></returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Layer.GetLastOuput">
            <summary>
            get last output of the neurons in this layer
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm">
            <summary>
            stockastic gradient backpropagation learning algorithm
            </summary>
            <remarks>
            
            Neuron j in L-1                   
             o ---------> Signal f(W*S_j) 
            Neuron i in L 
             o ---------> Signal f(W*S_i) 
            Neuron k in L+1
            
            
            for i
            
            t_i(n+1)     = t_i(n)     - \alpha*EO_i*\gamma     * ( T_i(n)   - T_i(n-1))
            w_{i,j}(n+1) = w_{i,j}(n) + \alpha*S_j*EO_i+\gamma * (w_[i,j}(n)-w_{i,j}(n-1))
            
            
            	with :
            			EO_i = f'(WSi) * (\IE Ouput of i - S_i)        for output layer
            			EO_i = f'(WSi) * \sum_k  w_{k,i} EO_k  )       for others
            </remarks>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm">
            <summary>
            The abstract class describing a learning
            algorithm for a neural network
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm._error_treshold">
            <summary>
            intern error threshold
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm._maximum_of_epochs">
            <summary>
            the maximum of epochs in gradient descent
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.InputTrainingData">
            <summary>
            the input training data
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.OutputTrainingData">
            <summary>
            the corresponding expected output for training data
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm._monitor">
            <summary>
            intern variable for extern monitoring
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.#ctor(BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork)">
            <param name="N">ANN to train</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.Learn(System.Single[][],System.Single[][])">
            <summary>
            base function to learn data
            </summary>
            <param name="inputs">input data for training</param>
            <param name="expected_outputs">th corresponding output data</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.Convergence">
            <summary>
            custom check for convergence
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.Pulse">
            <summary>
            pulse in every epoch of stochastic gradient descent
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.ANN">
            <summary>
            the neural network to learn
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.MeanSquareError">
            <summary>
            the mean square error in training data
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.ErrorTreshold">
            <summary>
            access to the error threshold
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.LearningMonitor">
            <summary>
            extern monitor to get information about progress in learning
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.CurrentEpoch">
            <summary>
            the current epoch
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm.MaximumOfEpochs">
            <summary>
            get or set maximum of epoch
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm._alpha">
            <summary>
            parameters of learning algorithm
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm._gamma">
            <summary>
            parameters of learning algorithm
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm._error_vector">
            <summary>
            errors in iteration
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.#ctor(BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork)">
            <summary>
            default BackPropagation (alpha = 0.5 ; gamma = 0.2)
            </summary>
            <param name="ANN">network to train</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.Learn(System.Single[][],System.Single[][])">
            <summary>
            backpropagation learning algorithm
            </summary>
            <param name="inputs">the input</param>
            <param name="expected_outputs">the expected output</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.CalculateUsefulVariable(System.Int32)">
            <summary>
            to speed up the process of weight updating we use this variable
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.SetWeight(System.Int32)">
            <summary>
            update the weight (see delta rule and chain rule for derivatives) and update affecting neurons
            </summary>
            <param name="NewWeight">new weight to set</param>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.LearningRate">
            <summary>
            set or get learning rate (high values fast progress but no convergence, low values -> slow learning)
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.BackPropagationLearningAlgorithm.RumelhartCoefficient">
            <summary>
            set or get the rumelhart coefficient
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.LearningMonitors.iLearningMonitor">
            <summary>
            to send the current progress in learning to another class you can use this monitor
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningMonitors.iLearningMonitor.Convergence">
            <summary>
            after every epoch this function can decide whether the learning process should be stopped or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.LearningMonitors.iLearningMonitor.Pulse(System.Int32,System.Single)">
            <summary>
            after each epoch this function is be called be the learner
            </summary>
            <param name="CurrentNumberOfIterations">number of iterations in training session</param>
            <param name="CurrentMeanSquareError">the current mean square error</param>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork">
            <summary>
            represent an artificial feed forward neural network
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.NetworkLayers">
            <summary>
            store the layers
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.ProtectedNumberOfInputs">
            <summary>
            number of input neurons
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.TeacherAlgorithm">
            <summary>
            the learning algorithmn to improve weights
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[],BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction,BotSuite.MachineLearning.NeuralNetwork.LearningAlgorithms.LearningAlgorithm)">
            <summary>
            initialise neural network
            </summary>
            <param name="NumberOfInputs">the number of input vectors</param>
            <param name="LayerVectorDescription">description of hidden layers</param>
            <param name="ActivationFunction">the activation function (default sigmoid)</param>
            <param name="Learner">Learning algorithm (default: backpropagation)</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.ShuffleWeight">
            <summary>
            set ranom weights to each connection
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.ShuffleThreshold">
            <summary>
            set random threshold to each neuron
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.ShuffleBoth">
            <summary>
            everything is random
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.SetIntervalForPRNG(System.Single,System.Single)">
            <summary>
            set interval for random numbers
            </summary>
            <param name="min">left interval ending</param>
            <param name="max">right interval ending</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Store(System.String)">
            <summary>
            store the network as a binary file
            </summary>
            <code>
            NeuralNetwork ANN = new NeuralNetwork(...);
            Ann.Store("savednetwork.bin");
            </code>
            <param name="file">file name</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Load(System.String)">
            <summary>
            load the neural network from binary file
            </summary>
            <code>
            NeuralNetwork ANN = NeuralNetwork.Load("savednetwork.bin");
            </code>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Learn(System.Single[][],System.Single[][])">
            <summary>
            wrapper for direct learning
            </summary>
            <param name="inputs">input training data</param>
            <param name="expected_outputs">the expected output of training data</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Output(System.Single[])">
            <summary>
            calculates the output for specific input
            </summary>
            <param name="input">input vector</param>
            <returns>output vector</returns>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.PredictionError(System.Single[][],System.Single[][])">
            <summary>
            calculates the prediction error (good for cross validation)
            </summary>
            <param name="inputs">set of training data/ test data</param>
            <param name="expected_outputs">the expected output</param>
            <returns></returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.NumberOfInputs">
            <summary>
            get number of input neurons
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.NumberOfOutputs">
            <summary>
            get number of output neurons
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.NumberOfLayers">
            <summary>
            get number of hidden layers
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Teacher">
            <summary>
            the learning algorithm
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.Item(System.Int32)">
            <summary>
            pointer to hidden layer n
            </summary>
            <param name="n">index n</param>
            <returns></returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.NeuralNetwork.f">
            <summary>
            activation function the each neuron in each layer
            </summary>
        </member>
        <member name="T:BotSuite.MachineLearning.NeuralNetwork.Neuron">
             <summary>
             this class represents a neuron
             </summary>
             <remarks>
             output = f( threshold* \sum_{j=1}^{N_Inputs} s_{t-1,j}w_j ) 
            </remarks>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron.prng">
            <summary>
            intern instance of a PseudoRandomNumberGenerator
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._intervall_min">
            <summary>
            intern interval for randomisation
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._intervall_max">
            <summary>
            intern interval for randomisation
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._weight">
            <summary>
            intern weights of inputs
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._remember_weight">
            <summary>
            intern weights of inputs
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._threshold">
            <summary>
            intern theshold variable
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._remember_threshold">
            <summary>
            intern theshold variable
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._f">
            <summary>
            intern handle of the activation function
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._neuron_output">
            <summary>
            the output
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._synapsevalue_with_threshold">
            <summary>
            values for faster computation
            </summary>
        </member>
        <member name="F:BotSuite.MachineLearning.NeuralNetwork.Neuron._usefull_variable">
            <summary>
            values for faster computation
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Neuron.#ctor(System.Int32,BotSuite.MachineLearning.NeuralNetwork.ActivationFunctions.iActivationFunction)">
            <summary>
            initialise the neuron
            </summary>
            <param name="NumberOfInputs">number of inputs in layer before</param>
            <param name="ActivationFunction">activation function for current neuron (default: sigmoid function)</param>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Neuron.ShuffleWeight">
            <summary>
            set random weights
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Neuron.ShuffleThreshold">
            <summary>
            set random threshold
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Neuron.ShuffleBoth">
            <summary>
            set all random
            </summary>
        </member>
        <member name="M:BotSuite.MachineLearning.NeuralNetwork.Neuron.Signal(System.Single[])">
            <summary>
            get the signal from this neuron
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.NumberOfNeurons">
            <summary>
            returns number of neurons which affect this neuron
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Item(System.Int32)">
            <summary>
            pointer to all neurons that affect this neuron
            </summary>
            <param name="NeuronIdx"></param>
            <returns></returns>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Threshold">
            <summary>
            thresholding
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Last_Threshold">
            <summary>
            remember last threshold
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Output">
            <summary>
            get the output of this neuron
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Derivative">
            <summary>
            get gradient value for stochastic gradient descent
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.LastSumOfInputsWithTreshold">
            <summary>
            this is useful for calculations
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.F">
            <summary>
            set or get the activationfunction
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.UsefulVariable">
            <summary>
            simplify the calculation
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Last_Weight">
            <summary>
            remember last weights
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Randomization_LeftIntervall">
            <summary>
            Get or set the minimum value for randomisation of weights and threshold
            </summary>
        </member>
        <member name="P:BotSuite.MachineLearning.NeuralNetwork.Neuron.Randomization_RightIntervall">
            <summary>
            get or set the right end of interval value for randomization
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpConstants">
            <summary>
            constants for the HTTP protocol
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpConstants.HeaderNames">
            <summary>
            constants for HTTP header field names
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.AcceptRanges">
            <summary>
            the Accept-Ranges header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Age">
            <summary>
            the Age header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Allow">
            <summary>
            the Allow header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.CacheControl">
            <summary>
            the Cache-Control header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Connection">
            <summary>
            the Connection header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentEncoding">
            <summary>
            the Content-Encoding header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentLanguage">
            <summary>
            the Content-Language header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentLength">
            <summary>
            the Content-Length header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentLocation">
            <summary>
            the Content-Location header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentMd5">
            <summary>
            the Content-MD5 header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentDisposition">
            <summary>
            the Content-Disposition header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentRange">
            <summary>
            the Content-Range header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentSecurityPolicy">
            <summary>
            the Content-Security-Policy header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ContentType">
            <summary>
            the Content-Type header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Date">
            <summary>
            the Date header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ETag">
            <summary>
            the ETag header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Expires">
            <summary>
            the Expires header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.LastModified">
            <summary>
            the Last-Modified header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Link">
            <summary>
            the Link header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Location">
            <summary>
            the Location header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.P3P">
            <summary>
            the P3P header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Pragma">
            <summary>
            the Pragma header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.ProxyAuthenticate">
            <summary>
            the Proxy-Authenticate header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Refresh">
            <summary>
            the Refresh header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.RetryAfter">
            <summary>
            the Retry-After header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Server">
            <summary>
            the Server header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.SetCookie">
            <summary>
            the Set-Cookie header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Trailer">
            <summary>
            the Trailer header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.TransferEncoding">
            <summary>
            the Transfer-Encoding header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Vary">
            <summary>
            the Vary header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Via">
            <summary>
            the Via header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.Warning">
            <summary>
            the Warning header field name
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpConstants.HeaderNames.WwwAuthenticate">
            <summary>
            the WWW-Authenticate header field name
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpHeader">
            <summary>
            represents a HTTP header field
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpHeader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpHeader"/> class
            </summary>
            <param name="key">
            the name/key of the header field
            </param>
            <param name="value">
            the value of the header field
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpHeader.Equals(BotSuite.Net.HttpHeader)">
            <summary>
            compares 2 instances of the HttpHeader class for equality
            </summary>
            <param name="other">
            the instance to compare to
            </param>
            <returns>
            true, if both are equal, else false
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpHeader.CompareTo(BotSuite.Net.HttpHeader)">
            <summary>
            compares the order of 2 instances of the HttpClass
            </summary>
            <param name="other">
            the instance to compare to
            </param>
            <returns>
            an integer determing the order of both elements
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpHeader.ToString">
            <summary>
            creates a string representation of the current instance of this class
            </summary>
            <returns>a string representation of the current instance of this class</returns>
        </member>
        <member name="P:BotSuite.Net.HttpHeader.Key">
            <summary>
            Gets the name/key of the header field
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpHeader.Value">
            <summary>
            Gets the value of the header field
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpClient">
            <summary>
            HttpClient class for making bots for Browsergames
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpClient.cookies">
            <summary>
            Contains all cookies for this instance of the HttpClient class
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpClient.userAgent">
            <summary>
            the user agent string which is used for requests
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpClient.headers">
            <summary>
            a collection of all headers of the last response
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpClient"/> class
            </summary>
            <param name="userAgent">
            a useragent string
            </param>
            <param name="initialReferer">
            the Referer the first request will be sent from, i.e. www.google.com
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpClient.Post``1(System.String,BotSuite.Net.HttpPostDataCollection,System.String)">
            <summary>
            sends a HTTP POST request to a given URL with given POST data and a optional referer
            </summary>
            <typeparam name="TRespType">
            return type of the Post request
            </typeparam>
            <param name="url">
            the URL to send the post request to
            </param>
            <param name="postdata">
            the POST data
            </param>
            <param name="referer">
            the referer to send the request from
            </param>
            <returns>
            the response as TRespType
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.Post``1(System.String,System.String,System.String)">
            <summary>
            sends a HTTP POST request to a given URL with given POST data and a optional referer...
            (better use overload with HttpPostDataCollection parameter, it's easier to use and more flexible)
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            the URL to send the post request to
            </param>
            <param name="postdata">
            the POST data
            </param>
            <param name="referer">
            the referer to send the request from
            </param>
            <returns>
            the response as TRespType
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.PostInternal``1(System.String,System.String,System.String)">
            <summary>
            internal POST method
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            url to send post request to
            </param>
            <param name="postdata">
            data of the post request
            </param>
            <param name="referer">
            referer for the post request
            </param>
            <returns>
            response as TRespType of site
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.Get``1(System.String,System.String)">
            <summary>
            sends a HTTP GET request to a given URL with a optional referer
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            the URL to send the request to
            </param>
            <param name="referer">
            the referer to send the request from
            </param>
            <returns>
            returns the response as TRespType of the requested website
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.GetInternal``1(System.String,System.String)">
            <summary>
            internal GET method
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            url to send request to
            </param>
            <param name="referer">
            referer for the request
            </param>
            <returns>
            response as TRespType of the requested website
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.Head``1(System.String,System.String)">
            <summary>
            sends a HTTP HEAD request to a given URL with a optional referer
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            the URL to send the request to
            </param>
            <param name="referer">
            the referer to send the request from
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpClient.HeadInternal``1(System.String,System.String)">
            <summary>
            internal HEAD request method
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="url">
            url for the head request
            </param>
            <param name="referer">
            referer for the head request
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpClient.CorrectUrl(System.String)">
            <summary>
            corrects some standard-failures made when someone writes and URL, like forgetting the protocol at the beginning
            </summary>
            <param name="url">
            the URL that probably needs some correction
            </param>
            <returns>
            the, if it was necessary, corrected URL
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.PrepareRequest(System.String,System.String)">
            <summary>
            Creates a HttpWebRequest and prepares it for usage (e.g. sets method and other parameters)
            </summary>
            <param name="url">
            The url to request will be used for
            </param>
            <param name="method">
            the method to use, e.g. POST or GET
            </param>
            <returns>
            a fully prepared HttpWebRequest
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.GetResponse``1(System.Net.HttpWebRequest)">
            <summary>
            Receives the response for a HttpWebRequest
            </summary>
            <typeparam name="TRespType">
            the return type for the response
            </typeparam>
            <param name="req">
            the HttpWebRequest the return is wanted for
            </param>
            <returns>
            the response as TRespType for the request
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.SetLastReponseEncoding(System.String)">
            <summary>
            Sets the LastResponseEncoding to the specified charset
            </summary>
            <param name="charset">The charset</param>
        </member>
        <member name="M:BotSuite.Net.HttpClient.LoadStringFromCache">
            <summary>
            Converts the cache of this HttpClient into a string
            </summary>
            <returns>the string from the cache</returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.LoadImageFromCache">
            <summary>
            Converts the cache of this HttpClient into an image
            </summary>
            <returns>the image from the cache</returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.RepairCookie(System.Uri,System.Net.Cookie)">
            <summary>
            repairs a cookie (path and uri)
            </summary>
            <param name="u">
            the uri the cookie is for
            </param>
            <param name="c">
            the cookie to repair
            </param>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Cache">
            <summary>
            Gets all bytes of the last response
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Cookies">
            <summary>
            Gets all cookies for this instance of the HttpClient class
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Headers">
            <summary>
            Gets a collection of all headers of the last response
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.AutoReferer">
            <summary>
            Gets or sets a value indicating whether the HttpClient should adjust the referer at every change of the URL
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Referer">
            <summary>
            Gets or sets the current referer
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.UseProxy">
            <summary>
            Gets or sets a value indicating whether the HttpClient should use the HttpClient.Proxy for requests
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Proxy">
            <summary>
            Gets or sets a proxy object with settings for proxy usage for requests (when HttpClient.UseProxy is set to true)
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.UseUnsafeHeaderParsing">
            <summary>
            Gets or sets a value indicating whether unsafe header parsing should be used
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.AllowAutoRedirect">
            <summary>
            Gets or sets a value indicating whether auto-redirects should be allowed (false might cause more work for the
            developer since more requests have to be made manually)
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.AllowBotSuiteAutoRedirect">
            <summary>
            Gets or sets a value indicating whether BotSuites internal redirect method should be used (will only work if
            .AllowAutoRedirect is false), else false
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.MaximumRedirectCount">
            <summary>
            Gets or sets the maximum of consecutive requests for AllowAutoRedirect and AllowBotSuiteAutoRedirect
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Expect100Continue">
            <summary>
            Gets or sets a value indicating whether Expect100Continue of the HttpWebRequest.ServiceProvider is used upon
            request
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.LastResponseEncoding">
            <summary>
            Gets the encoding of the last web-response
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.IgnoreCertificateValidationFailures">
            <summary>
            Gets or sets a value indicating whether or not the HttpClient should ignore SSL/TLS certificate validation failures
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.DecompressionMethod">
            <summary>
            Gets or sets the decompression method.
            </summary>
        </member>
        <member name="T:BotSuite.Mouse">
            <summary>
            Class for simulating mouse actions
            </summary>
        </member>
        <member name="M:BotSuite.Mouse.LeftClick">
            <summary>
            performs a left click at current cursor position
            </summary>
            <remarks>
            you have to move the cursor at the correct position before fire a left click
            </remarks>
            <example>
            <code>
            <![CDATA[
            Mouse.LeftClick();
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.LeftClick(System.IntPtr,System.Drawing.Point)">
            <summary>
            simulates a left click at a specific coordinate
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.LeftClick(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.LeftDown">
            <summary>
            performs a left button down at the current cursor position
            </summary>
            <remarks>
            make sure to release the mouse button using "LeftUp()". Otherwise there can happen unintended consequences
            </remarks>
            <example>
            <code>
            Mouse.LeftDown();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.LeftDown(System.IntPtr,System.Drawing.Point)">
            <summary>
            Simulates a left button down at the current cursor position
            </summary>
            <remarks>
            make sure to release the mouse button using "LeftUp()". Otherwise there can happen unintended consequences
            </remarks>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.LeftDown(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.LeftUp">
            <summary>
            Performs a left button up
            </summary>
            <example>
            <code>
            Mouse.LeftUp();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.LeftUp(System.IntPtr,System.Drawing.Point)">
            <summary>
            Simulates a left button at a predefined cursor position
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.LeftUp(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.RightClick">
            <summary>
            Performs a right click
            </summary>
            <example>
            <code>
            Mouse.RightClick();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightClick(System.IntPtr,System.Drawing.Point)">
            <summary>
            simulates a right click at a specific point 
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.RightClick(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.RightDown">
            <summary>
            performs a right button down
            </summary>
            <example>
            <code>
            Mouse.RightDown();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightDown(System.IntPtr,System.Drawing.Point)">
            <summary>
            simulates a right button down
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.RightDown(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.RightUp">
            <summary>
            Performs a right button up
            </summary>
            <example>
            <code>
            Mouse.RightUp();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightUp(System.IntPtr,System.Drawing.Point)">
            <summary>
            Simulates a right button up through the native methods
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.RightUp(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.DoubleClick">
            <summary>
            performs a double-click (left button) at the current cursor position
            </summary>
            <example>
            <code>
            <![CDATA[
            Mouse.DoubleClick();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:BotSuite.Mouse.DoubleClick(System.IntPtr,System.Drawing.Point)">
            <summary>
            Simulates a double-click (left button) at a given coordinate on screen relative to the window
            </summary>
            <example>
            <code>
            <![CDATA[
            ApplicationTunnel Trainer = new ApplicationTunnel("notepade.exe");
            Point p = new Point(400,600);
            Mouse.DoubleClick(Trainer.GetHandle(),p);
            ]]>
            </code>
            </example>
            <param name="handle">The handle of the window to click</param>
            <param name="point">The point to click</param>
        </member>
        <member name="M:BotSuite.Mouse.Move(System.Drawing.Point,System.Boolean,System.Int32)">
            <summary>
            moves the mouse to a specific point "target" through "steps" number of points
            </summary>
            <remarks>
            The more points you`ll use the more smoother the curve will be
            If the option "human" is false the cursor will jump to the target point and ignores "steps"
            </remarks>
            <example>
            <code>
            Point target = new Point(10,10);
            Mouse.Move(target,true,10);
            </code>
            </example>
            <param name="targetPosition">The target position</param>
            <param name="human">Simulate human-like jumps</param>
            <param name="steps">The points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.Move(System.Drawing.Rectangle,System.Boolean,System.Int32)">
            <summary>
            Moves the mouse to the middle of a rectangle
            </summary>
            <example>
            <code>
            Rectangle r = new Rectangle(50, 50, 100, 100);
            Mouse.Move(r,true,10);
            </code>
            </example>
            <param name="R">The rectangle to move to</param>
            <param name="human">Simulate human-like jumps</param>
            <param name="steps">The points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.DragAndDrop(System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Int32)">
            <summary>
            Performs a drag-and-drop action
            </summary>
            <remarks>
            If the option "human" is true, then the mouse can jiggle and the movement have some delays to emulate human mouse movement behavior, 
            since no human performs a complete linear straight cursor movement line
            </remarks>
            <param name="source">The drag point (drag from here)</param>
            <param name="target">The drop point (drop here)</param>
            <param name="human">Simulate human-like jumps </param>
            <param name="steps">The points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.GetPosition">
            <summary>
            Returns the current position of the mouse
            </summary>
            <example>
            <code>
            Point CurPos = Point.Empty;
            CurPos = Mouse.GetPosition();
            </code>
            </example>
            <returns>The mouse position</returns>
        </member>
        <member name="M:BotSuite.Mouse.Jiggle">
            <summary>
            Simulates a mouse jiggle
            </summary>
            <example>
            <code>
            Mouse.Jiggle();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.MoveRelativeToWindow(System.IntPtr,System.Drawing.Point,System.Boolean,System.Int32)">
            <summary>
            Moves the mouse relatively to a window
            </summary>
            <example>
            <code>
            IntPtr hwnd = ... ;
            bool res = MoveRelativeToWindow(hwnd, 20, 35, true, 10);
            </code>
            </example>
            <param name="windowHandle">The handle of the window</param>
            <param name="point">The target point</param>
            <param name="human">Simulate human-like jumps</param>
            <param name="steps">The points of pathpolygons</param>
            <returns>true/false</returns>
        </member>
        <member name="M:BotSuite.Mouse.GetPositionRelativeToControl(System.IntPtr)">
            <summary>
            Returns the current position of the mouse, relative to a window
            </summary>
            <example>
            <code>
            Point CurPos = Point.Empty;
            IntPtr hwnd = ... ;
            CurPos = Mouse.GetPositionRelativeToControl(hwnd);
            </code>
            </example>
            <param name="controlHandle">The handle of the window</param>
            <returns>Point position</returns>
        </member>
        <member name="M:BotSuite.Mouse.HoverControl(System.IntPtr)">
            <summary>
            Tests if the mouse is hovering a window
            </summary>
            <example>
            <code>
            bool OverTextbox = Mouse.HoverControl(Textbox1.Handle);
            </code>
            </example>
            <param name="controlHandle">The handle of the window</param>
            <returns>true/false</returns>
        </member>
        <member name="M:BotSuite.Mouse.InRectangle(System.Drawing.Point,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether the mouse is inside a rectangle or not
            </summary>
            <example>
            <code>
            Point Pos = GetPosition(); // get position of the mouse
            bool InRectangle = Mouse.InRectangle(Pos,50, 10, 20, 70);
            </code>
            </example>
            <param name="point">The point to test</param>
            <param name="top">The top of the rectangle</param>
            <param name="left">The left of the rectangle</param>
            <param name="bottom">The bottom of the rectangle</param>
            <param name="right">The right of the rectangle</param>
            <returns>inside=true / outside=false</returns>
        </member>
        <member name="M:BotSuite.Mouse.InRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether the mouse is inside a rectangle or not
            </summary>
            <example>
            <code>
            bool InRectangle = Mouse.InRectangle(50, 10, 20, 70);
            </code>
            </example>
            <param name="top">The top of the rectangle</param>
            <param name="left">The left of the rectangle</param>
            <param name="bottom">The bottom of the rectangle</param>
            <param name="right">The right of the rectangle</param>
            <returns>inside=true / outside=false</returns>
        </member>
        <member name="M:BotSuite.Mouse.Scroll(System.Int32)">
            <summary>
            Performs a mouse scroll
            </summary>
            <example>
            <code>
            Mouse.Scroll(-50);
            </code>
            </example>
            <param name="wheeldelta">Positive scrolls down, negative scrolls up</param>
        </member>
        <member name="T:BotSuite.Net.HttpHeaderCollection">
            <summary>
            represents a collection of multiple HttpHeader instances
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpHeaderCollection.GetHeaderByKey(System.String)">
            <summary>
            looks for an instance of the HttpHeader class in this collection by its key
            </summary>
            <param name="key">
            the key to search for
            </param>
            <returns>
            an instance of the HttpHeader class which has the given key
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpHeaderCollection.Contains(System.String)">
            <summary>
            checks if this collection contains an instance of the HttpHeader class with a given key
            </summary>
            <param name="key">
            the key to look for
            </param>
            <returns>
            true, if this collection contains an instance of the HttpHeader class with the given key, else false
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpHeaderCollection.ToString">
            <summary>
            creates a string representation of this instance of the HttpHeaderCollection class
            </summary>
            <returns>a string representation of this instance of the HttpHeaderCollection class</returns>
        </member>
        <member name="P:BotSuite.Net.HttpHeaderCollection.Item(System.String)">
            <summary>
            looks for an instance of the HttpHeader class in this collection by its key
            </summary>
            <param name="key">
            the key to search for
            </param>
            <returns>
            an instance of the HttpHeader class which has the given key
            </returns>
        </member>
        <member name="T:BotSuite.Net.HttpPostData">
            <summary>
            container-class for Http POST data key-value-pairs
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpPostData.key">
            <summary>
            the key/name of the POST data
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpPostData.value">
            <summary>
            the value of the POST data
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpPostData"/> class
            </summary>
            <param name="key">
            key/name of the POST data
            </param>
            <param name="value">
            value of the POST data
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.ToString">
            <summary>
            creates a string-representation of the POST data
            </summary>
            <returns>a string representation of the POST data key-value-pair</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.Equals(BotSuite.Net.HttpPostData)">
            <summary>
            checks if both instances of HTTP post data are equal
            </summary>
            <param name="other">
            the HttpPostData instance to compare equality with
            </param>
            <returns>
            true if both HttpPostData instances are equal, else false
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.CompareTo(BotSuite.Net.HttpPostData)">
            <summary>
            compares two HttpPostData instances, like for sorting in a list
            </summary>
            <param name="other">
            the HttpPostData instance to compare with
            </param>
            <returns>
            -1 if instance A is smaller, 0 if equal and 1 if instance A is greater then/to instance B
            </returns>
        </member>
        <member name="P:BotSuite.Net.HttpPostData.Key">
            <summary>
            Gets or sets the key/name of the POST data
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpPostData.Value">
            <summary>
            Gets or sets the value of the POST data
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpPostDataCollection">
            <summary>
            collection-class for HttpPostData-instances
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpPostDataCollection.postData">
            <summary>
            a list of all postdata instances in this collection
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpPostDataCollection"/> class
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Add(BotSuite.Net.HttpPostData)">
            <summary>
            adds a HttpPostData instance to the collection
            </summary>
            <param name="item">
            the item to add to the collection
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Clear">
            <summary>
            deletes all items from the collection
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Contains(BotSuite.Net.HttpPostData)">
            <summary>
            checks if a given item is already part of the collection
            </summary>
            <param name="item">
            an instance of the HttpPostData class
            </param>
            <returns>
            true, if this collection contains the given instance of the HttpPostData class, else false
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.CopyTo(BotSuite.Net.HttpPostData[],System.Int32)">
            <summary>
            copies the whole collection into a compatible one-dimensional array beginning at the given index of the target
            array
            </summary>
            <param name="array">
            the target array
            </param>
            <param name="arrayIndex">
            the index where to insert the items in the target array
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Remove(BotSuite.Net.HttpPostData)">
            <summary>
            removes the given item from the collection
            </summary>
            <param name="item">
            the item to remove from the collection
            </param>
            <returns>
            true, if removal was succesfull, else false (like if the item wasn't part of the collection)
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.GetEnumerator">
            <summary>
            returns the IEnumerator&lt;HttpPostData&gt; of this collection
            </summary>
            <returns>an Enumerator of this collection</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            returns the System.Collections.IEnumarator for this collection
            </summary>
            <returns>a non-generic IEnumerator of this collection</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.ToString">
            <summary>
            creates a string representation of this collection
            </summary>
            <returns>a string representation of this collection</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.FromString(System.String)">
            <summary>
            creates a HttpPostDataCollection instance from a POST data string
            </summary>
            <param name="postdata">
            the POST data string
            </param>
            <returns>
            a HttpPostDataCollection instance from the given POST data string
            </returns>
        </member>
        <member name="P:BotSuite.Net.HttpPostDataCollection.Count">
            <summary>
            Gets the amount of items in the collection
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpPostDataCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only or not
            </summary>
        </member>
        <member name="T:BotSuite.Net.HttpProxy">
            <summary>
            proxy class for storing proxy informations for HttpClient
            </summary>
        </member>
        <member name="F:BotSuite.Net.HttpProxy.internalProxy">
            <summary>
            the internally used WebProxy instance
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpProxy"/> class
            </summary>
            <param name="address">
            url of proxy
            </param>
            <param name="username">
            username for proxy, if applicable
            </param>
            <param name="password">
            password for proxy, if applicable
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpProxy"/> class
            </summary>
            <param name="address">
            uri of proxy
            </param>
            <param name="username">
            username for proxy, if applicable
            </param>
            <param name="password">
            password for proxy, if applicable
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.GetWebProxy">
            <summary>
            returns the internally manageg WebProxy object for usage in HttpWebRequest
            </summary>
            <returns>the internally used instance of the WebProxy class</returns>
        </member>
        <member name="T:BotSuite.Net.HttpProxyHacker">
            <summary>
            class used to change some settings so that a proxy can be used
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpProxyHacker.ToggleAllowUnsafeHeaderParsing(System.Boolean)">
            <summary>
            en-/disabled allow unsafe header parsing
            </summary>
            <param name="enable">
            determines whether to en- or disable this option
            </param>
            <returns>
            whether the operation succeeded or not
            </returns>
        </member>
        <member name="M:BotSuite.Net.HttpProxyHacker.IsUseUnsafeHeaderParsingActivated">
            <summary>
            checks if unsafe header parsing is active
            </summary>
            <returns>true, if unsafe header parsing is enabled, else false</returns>
        </member>
        <member name="T:BotSuite.Net.HttpRequestException">
            <summary>
            Exception class for wrapping exceptions thrown by one of the request methods (POST/GET)
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpRequestException"/> class
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpRequestException"/> class
            </summary>
            <param name="message">
            the message of the exception
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpRequestException"/> class
            </summary>
            <param name="message">
            the message of the exception
            </param>
            <param name="inner">
            the inner exception
            </param>
        </member>
        <member name="M:BotSuite.Net.HttpRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BotSuite.Net.HttpRequestException"/> class
            </summary>
            <param name="info">
            an instance of the SerializationInfo class
            </param>
            <param name="context">
            an instance of the StreamingContext class
            </param>
        </member>
        <member name="T:BotSuite.Recognition.Character.MagicMatchStick">
            <summary>
            one receptor (magicmatchstick) a line in the picture can be hitted by character (this results a true) or pass the character (this results a false)
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.xa">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.ya">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.xb">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.yb">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.left">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.top">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.right">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.bottom">
            <summary>
            description of the line
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.m">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.z">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.dy">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.dx">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.c">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchStick.d">
            <summary>
            calculates variables fo the line description
            </summary>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchStick.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            create one magic match stick
            </summary>
            <param name="xa_in">first x coordinate</param>
            <param name="ya_in">first y coordinate</param>
            <param name="xb_in">second x coordinate</param>
            <param name="yb_in">second y coordinate</param>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchStick.GetMagicMatchStickState(System.Int32,System.Int32)">
            <summary>
            does the magic match stick lies over (x,y) ?
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>cover / uncover as boolean</returns>
        </member>
        <member name="T:BotSuite.Recognition.Character.MagicMatchSticks">
            <summary>
            receptors for optical character recognition
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchSticks.rand">
            <summary>
            intern instance of PRNG
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.MagicMatchSticks.MagicStickList">
            <summary>
            intern list of receptors
            </summary>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchSticks.Num">
            <summary>
            get the number of magic match sticks
            </summary>
            <returns>num of magic sticks</returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchSticks.Add(BotSuite.Recognition.Character.MagicMatchStick)">
            <summary>
            add a magic stick to list
            </summary>
            <param name="Stick">magic stick</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchSticks.#ctor">
            <summary>
            Create a Container of Magic match Sticks
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchSticks.Generate(System.Int32)">
            <summary>
            generate some magic sticks in [0,1]^2
            </summary>
            <param name="count">number of magic sticks</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.MagicMatchSticks.GetMagicMatchSticksState(BotSuite.ImageLibrary.ImageData)">
            <summary>
            Get the pattern of the magics match sticks
            </summary>
            <param name="Image">image of character</param>
            <returns>pattern</returns>
        </member>
        <member name="P:BotSuite.Recognition.Character.MagicMatchSticks.Item(System.Int32)">
            <summary>
            handle the list of receptors
            </summary>
            <param name="index">index of receptor</param>
            <returns>receptor from list</returns>
        </member>
        <member name="T:BotSuite.Recognition.Character.OCR">
            <summary>
            class to recognize characters by a neural network
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.OCR.WorkingNeuralNetwork">
            <summary>
            instance of neural network
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.OCR.ImageSense">
            <summary>
            receptors to detect character
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.OCR.NetworkWasInitialised">
            <summary>
            flag of network initialisation
            </summary>
        </member>
        <member name="F:BotSuite.Recognition.Character.OCR.CharactersToRecognize">
            <summary>
            possible characters that can be recognized
            </summary>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.#ctor(System.Int32)">
            <summary>
            get a simple class to do OCR
            </summary>
            <param name="NumberOfSense">number of receptors</param>
            <returns>instance of class</returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.StartTrainingSession(System.Collections.Generic.Dictionary{System.Char,System.Collections.Generic.List{BotSuite.ImageLibrary.ImageData}})">
            <summary>
            start a new trainingsession to learn the new imagedatas
            </summary>
            <param name="TrainingImageData">data (images) to learn</param>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.PredictionError(System.Collections.Generic.Dictionary{System.Char,System.Collections.Generic.List{BotSuite.ImageLibrary.ImageData}})">
            <summary>
            calculate the prediction error of a textsuite
            </summary>
            <param name="TestSuite">Training data as list of pictures(imagedata) and key (character)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.GetMagicSticksPattern(BotSuite.ImageLibrary.ImageData)">
            <summary>
            get the pattern of the magic sticks, which the network learns
            </summary>
            <param name="Img">image of character</param>
            <returns>pattern of magic sticks as array of floats (0.0f, 1.0f)</returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.GetNetworkOutput(System.Single[])">
            <summary>
            get the output of the neural network
            </summary>
            <param name="input"></param>
            <returns>network output as array of float</returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.Recognize(BotSuite.ImageLibrary.ImageData)">
            <summary>
            recognize a character in image
            </summary>
            <param name="Img">image of character</param>
            <returns>detected character (this is possible wrong, if the training wasn't successfull)</returns>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.Store(System.String)">
            <summary>
            save the OCR data in a binary formated file
            </summary>
            <param name="file">the target file path</param>
        </member>
        <member name="M:BotSuite.Recognition.Character.OCR.Load(System.String)">
            <summary>
            load a OCR data file from a binary formated file
            </summary>
            <param name="file">the neural network file file</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.ScreenShot">
            <summary>
                This class provides functions to create screenshots
            </summary>
        </member>
        <member name="M:BotSuite.ScreenShot.Create">
            <summary>
                Creates a complete screenshot
            </summary>
            <example>
                <code>
            Bitmap capture = ScreenShot.Create();
            </code>
            </example>
            <returns>Bitmap of captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.CreateFromHidden(System.IntPtr)">
            <summary>
                Creates a screenshot from a hidden window
            </summary>
            <example>
                <code>
            <![CDATA[
            IntPtr hwnd = ... ;
            Bitmap capture = ScreenShot.CreateFromHidden(hwnd);
            ]]>
            </code>
            </example>
            <param name="windowHandle">Handle of window</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ScreenShot.CreateFromHidden2(System.IntPtr)">
            <summary>
                Creates a screenshot from a hidden window using a different method
            </summary>
            <example>
                <code>
            <![CDATA[
            IntPtr hwnd = ... ;
            Bitmap capture = ScreenShot.CreateFromHidden(hwnd);
            ]]>
            </code>
            </example>
            <param name="windowHandle">Handle of window</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ScreenShot.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a complete screenshot using a rectangle
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <example>
                <code>
            <![CDATA[
            // capture upper left 10 x 10 px rectangle
            Bitmap capture = ScreenShot.Create(0,0,10,10);
            ]]>
            </code>
            </example>
            <returns>Bitmap of captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.Create(System.IntPtr)">
            <summary>
                Creates a complete screenshot using a handle
            </summary>
            <example>
                <code>
            <![CDATA[
            IntPtr hwnd = ... ;
            Bitmap capture = ScreenShot.Create(hwnd);
            ]]>
            </code>
            </example>
            <param name="windowHandle">Handle of window</param>
            <returns>Captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.CreateRelativeToControl(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
                Creates a screenshot relative to a control in a rectangle
            </summary>
            <param name="control">Relative control</param>
            <param name="screenshotArea">Screenshot area</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.Utility">
            <summary>
                commons functions
            </summary>
        </member>
        <member name="M:BotSuite.Utility.Delay(System.Int32,System.Int32)">
            <summary>
                pause the current thread for x ms
            </summary>
            <param name="lower">min time</param>
            <param name="upper">max time </param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Utility.Delay(System.Int32)">
            <summary>
                pause the current thread for x ms
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Utility.Random(System.Int32,System.Int32)">
            <summary>
                create a random integer (unif) between lower and upper
            </summary>
            <param name="lower">min number</param>
            <param name="upper">max number</param>
            <returns>random integer</returns>
        </member>
        <member name="M:BotSuite.Utility.Random(System.Double,System.Double)">
            <summary>
                create a random double between lower and upper
            </summary>
            <param name="lower">min number</param>
            <param name="upper">max number</param>
            <returns>random double</returns>
        </member>
        <member name="T:BotSuite.NativeMethods">
            <summary>
             P/Invokes
            </summary>
        </member>
        <member name="F:BotSuite.NativeMethods.WH_KEYBOARD_LL">
            <summary>
            defines the callback type for the hook
            </summary>
        </member>
        <member name="M:BotSuite.NativeMethods.SetWindowsHookEx(System.Int32,BotSuite.NativeMethods.keyboardHookProc,System.IntPtr,System.UInt32)">
            <summary>
            Sets the windows hook, do the desired event, one of hInstance or threadId must be non-null
            </summary>
            <param name="idHook">The id of the event you want to hook</param>
            <param name="callback">The callback.</param>
            <param name="hInstance">The handle you want to attach the event to, can be null</param>
            <param name="threadId">The thread you want to attach the event to, can be null</param>
            <returns>a handle to the desired hook</returns>
        </member>
        <member name="M:BotSuite.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Unhooks the windows hook.
            </summary>
            <param name="hInstance">The hook handle that was returned from SetWindowsHookEx</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:BotSuite.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.Int32,BotSuite.NativeMethods.keyboardHookStruct@)">
            <summary>
            Calls the next hook.
            </summary>
            <param name="idHook">The hook id</param>
            <param name="nCode">The hook code</param>
            <param name="wParam">The wparam.</param>
            <param name="lParam">The lparam.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the library.
            </summary>
            <param name="lpFileName">Name of the library</param>
            <returns>A handle to the library</returns>
        </member>
        <member name="T:BotSuite.Window">
            <summary>
            Class with functions for window handling
            </summary>
        </member>
        <member name="M:BotSuite.Window.SetFrontWindow(System.String)">
            <summary>
            Sets a window as a foreground window
            </summary>
            <param name="windowName"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Window.ShowWindow(System.IntPtr)">
            <summary>
            Shows a window
            </summary>
            <param name="windowHandle"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Window.GetAllMainWindows">
            <summary>
            Collects MainWindows
            </summary>
            <example>
            <code>
            <![CDATA[
            List<IntPtr> hWnds = new List<IntPtr>();
            hWnds = Window.GetAllMainWindows();
            ]]>
            </code>
            </example>
            <returns>An array of the main windows' handles</returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByProcessName(System.String)">
            <summary>
            Tries to find a window by its name
            </summary>
            <example>
            <code>
            <![CDATA[
            IntPtr hwnd = (IntPtr)0;
            hWnd = Window.FindWindowByProcessName("notepad");
            ]]>
            </code>
            </example>
            <param name="processName">Process name of window</param>
            <returns>Handle of window</returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByWindowTitle(System.String)">
            <summary>
            Gets a handle of a window by name
            </summary>
            <example>
            <code>
            IntPtr hwnd = Window.GetHandleByWindowTitle("notepad");
            </code>
            </example>
            <param name="windowTitle">Name of window</param>
            <returns>Handle of window</returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByProcessId(System.Int32)">
            <summary>
            Gets a handle of a window by id of process
            </summary>
            <param name="id">The process id</param>
            <returns>Handle of window</returns>
        </member>
        <member name="M:BotSuite.Window.HideMaximizeButton(System.IntPtr)">
            <summary>
            Hides the maximize button of a window
            </summary>
            <param name="handle">Window handle</param>
        </member>
        <member name="M:BotSuite.Window.HideMinimizeButton(System.IntPtr)">
            <summary>
            Hides the minimize button of a window
            </summary>
            <param name="handle">Window handle</param>
        </member>
        <member name="M:BotSuite.Window.ShowMaximizeButton(System.IntPtr)">
            <summary>
            Shows the maximize button of a window
            </summary>
            <param name="handle">Window handle</param>
        </member>
        <member name="M:BotSuite.Window.ShowMinimizeButton(System.IntPtr)">
            <summary>
            Shows the minimize button of a window
            </summary>
            <param name="handle">Window handle</param>
        </member>
    </members>
</doc>
